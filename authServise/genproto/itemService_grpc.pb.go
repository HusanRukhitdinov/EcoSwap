// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: itemService.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EcoServiceClient is the client API for EcoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EcoServiceClient interface {
	CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error)
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error)
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error)
	GetAllItems(ctx context.Context, in *GetAllItemsRequest, opts ...grpc.CallOption) (*GetAllItemsResponse, error)
	GetByIdItem(ctx context.Context, in *GetByIdItemRequest, opts ...grpc.CallOption) (*GetByIdItemResponse, error)
	SearchItemsAndFilt(ctx context.Context, in *SearchItemsAndFiltRequest, opts ...grpc.CallOption) (*SearchItemsAndFiltResponse, error)
	CreateChangeSwap(ctx context.Context, in *CreateChangeSwapRequest, opts ...grpc.CallOption) (*CreateChangeSwapResponse, error)
	UpdateAcceptSwap(ctx context.Context, in *UpdateAcceptSwapRequest, opts ...grpc.CallOption) (*UpdateAcceptSwapResponse, error)
	UpdateRejectSwap(ctx context.Context, in *UpdateRejactSwapRequest, opts ...grpc.CallOption) (*UpdateRejactSwapResponse, error)
	GetChangeSwap(ctx context.Context, in *GetChangeSwapRequest, opts ...grpc.CallOption) (*GetChangeSwapResponse, error)
	CreateAddRecyclingCenter(ctx context.Context, in *CreateAddRecyclingCenterRequest, opts ...grpc.CallOption) (*CreateAddRecyclingCenterResponse, error)
	SearchRecyclingCenter(ctx context.Context, in *SearchRecyclingCenterRequest, opts ...grpc.CallOption) (*SearchRecyclingCenterResponse, error)
	CreateRecyclingSubmissions(ctx context.Context, in *CreteRecyclingSubmissionsRequest, opts ...grpc.CallOption) (*CreteRecyclingSubmissionsResponse, error)
	CreateAddUserRating(ctx context.Context, in *CreateAddUserRatingRequest, opts ...grpc.CallOption) (*CreateAddUserRatingResponse, error)
	GetUserRating(ctx context.Context, in *GetUserRatingRequest, opts ...grpc.CallOption) (*GetUserRatingResponse, error)
	CreateItemCategoryManag(ctx context.Context, in *CreateItemCategoryManagRequest, opts ...grpc.CallOption) (*CreateItemCategoryManagResponse, error)
	GetStatistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*GetStatisticsResponse, error)
	GetMonitoringUserActivity(ctx context.Context, in *GetMonitoringUserActivityRequest, opts ...grpc.CallOption) (*GetMonitoringUserActivityResponse, error)
	CreateEcoChallenge(ctx context.Context, in *CreateEcoChallengeRequest, opts ...grpc.CallOption) (*CreateEcoChallengeResponse, error)
	CreateParticipateChallenge(ctx context.Context, in *CreateParticipateChallengeRequest, opts ...grpc.CallOption) (*CreateParticipateChallengeResponse, error)
	UpdateEcoChallengeResult(ctx context.Context, in *UpdateEcoChallengeRresultRequest, opts ...grpc.CallOption) (*UpdateEcoChallengeRresultResponse, error)
	CreateAddEcoTips(ctx context.Context, in *CreateAddEcoTipsRequest, opts ...grpc.CallOption) (*CreateAddEcoTipsResponse, error)
	GetAddEcoTips(ctx context.Context, in *GetAddEcoTipsRequest, opts ...grpc.CallOption) (*GetAddEcoTipsResponse, error)
}

type ecoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEcoServiceClient(cc grpc.ClientConnInterface) EcoServiceClient {
	return &ecoServiceClient{cc}
}

func (c *ecoServiceClient) CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error) {
	out := new(CreateItemResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/CreateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error) {
	out := new(UpdateItemResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/UpdateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error) {
	out := new(DeleteItemResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/DeleteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) GetAllItems(ctx context.Context, in *GetAllItemsRequest, opts ...grpc.CallOption) (*GetAllItemsResponse, error) {
	out := new(GetAllItemsResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/GetAllItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) GetByIdItem(ctx context.Context, in *GetByIdItemRequest, opts ...grpc.CallOption) (*GetByIdItemResponse, error) {
	out := new(GetByIdItemResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/GetByIdItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) SearchItemsAndFilt(ctx context.Context, in *SearchItemsAndFiltRequest, opts ...grpc.CallOption) (*SearchItemsAndFiltResponse, error) {
	out := new(SearchItemsAndFiltResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/SearchItemsAndFilt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) CreateChangeSwap(ctx context.Context, in *CreateChangeSwapRequest, opts ...grpc.CallOption) (*CreateChangeSwapResponse, error) {
	out := new(CreateChangeSwapResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/CreateChangeSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) UpdateAcceptSwap(ctx context.Context, in *UpdateAcceptSwapRequest, opts ...grpc.CallOption) (*UpdateAcceptSwapResponse, error) {
	out := new(UpdateAcceptSwapResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/UpdateAcceptSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) UpdateRejectSwap(ctx context.Context, in *UpdateRejactSwapRequest, opts ...grpc.CallOption) (*UpdateRejactSwapResponse, error) {
	out := new(UpdateRejactSwapResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/UpdateRejectSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) GetChangeSwap(ctx context.Context, in *GetChangeSwapRequest, opts ...grpc.CallOption) (*GetChangeSwapResponse, error) {
	out := new(GetChangeSwapResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/GetChangeSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) CreateAddRecyclingCenter(ctx context.Context, in *CreateAddRecyclingCenterRequest, opts ...grpc.CallOption) (*CreateAddRecyclingCenterResponse, error) {
	out := new(CreateAddRecyclingCenterResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/CreateAddRecyclingCenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) SearchRecyclingCenter(ctx context.Context, in *SearchRecyclingCenterRequest, opts ...grpc.CallOption) (*SearchRecyclingCenterResponse, error) {
	out := new(SearchRecyclingCenterResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/SearchRecyclingCenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) CreateRecyclingSubmissions(ctx context.Context, in *CreteRecyclingSubmissionsRequest, opts ...grpc.CallOption) (*CreteRecyclingSubmissionsResponse, error) {
	out := new(CreteRecyclingSubmissionsResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/CreateRecyclingSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) CreateAddUserRating(ctx context.Context, in *CreateAddUserRatingRequest, opts ...grpc.CallOption) (*CreateAddUserRatingResponse, error) {
	out := new(CreateAddUserRatingResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/CreateAddUserRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) GetUserRating(ctx context.Context, in *GetUserRatingRequest, opts ...grpc.CallOption) (*GetUserRatingResponse, error) {
	out := new(GetUserRatingResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/GetUserRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) CreateItemCategoryManag(ctx context.Context, in *CreateItemCategoryManagRequest, opts ...grpc.CallOption) (*CreateItemCategoryManagResponse, error) {
	out := new(CreateItemCategoryManagResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/CreateItemCategoryManag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) GetStatistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*GetStatisticsResponse, error) {
	out := new(GetStatisticsResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/GetStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) GetMonitoringUserActivity(ctx context.Context, in *GetMonitoringUserActivityRequest, opts ...grpc.CallOption) (*GetMonitoringUserActivityResponse, error) {
	out := new(GetMonitoringUserActivityResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/GetMonitoringUserActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) CreateEcoChallenge(ctx context.Context, in *CreateEcoChallengeRequest, opts ...grpc.CallOption) (*CreateEcoChallengeResponse, error) {
	out := new(CreateEcoChallengeResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/CreateEcoChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) CreateParticipateChallenge(ctx context.Context, in *CreateParticipateChallengeRequest, opts ...grpc.CallOption) (*CreateParticipateChallengeResponse, error) {
	out := new(CreateParticipateChallengeResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/CreateParticipateChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) UpdateEcoChallengeResult(ctx context.Context, in *UpdateEcoChallengeRresultRequest, opts ...grpc.CallOption) (*UpdateEcoChallengeRresultResponse, error) {
	out := new(UpdateEcoChallengeRresultResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/UpdateEcoChallengeResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) CreateAddEcoTips(ctx context.Context, in *CreateAddEcoTipsRequest, opts ...grpc.CallOption) (*CreateAddEcoTipsResponse, error) {
	out := new(CreateAddEcoTipsResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/CreateAddEcoTips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecoServiceClient) GetAddEcoTips(ctx context.Context, in *GetAddEcoTipsRequest, opts ...grpc.CallOption) (*GetAddEcoTipsResponse, error) {
	out := new(GetAddEcoTipsResponse)
	err := c.cc.Invoke(ctx, "/protos.EcoService/GetAddEcoTips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EcoServiceServer is the server API for EcoService service.
// All implementations must embed UnimplementedEcoServiceServer
// for forward compatibility
type EcoServiceServer interface {
	CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error)
	DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error)
	GetAllItems(context.Context, *GetAllItemsRequest) (*GetAllItemsResponse, error)
	GetByIdItem(context.Context, *GetByIdItemRequest) (*GetByIdItemResponse, error)
	SearchItemsAndFilt(context.Context, *SearchItemsAndFiltRequest) (*SearchItemsAndFiltResponse, error)
	CreateChangeSwap(context.Context, *CreateChangeSwapRequest) (*CreateChangeSwapResponse, error)
	UpdateAcceptSwap(context.Context, *UpdateAcceptSwapRequest) (*UpdateAcceptSwapResponse, error)
	UpdateRejectSwap(context.Context, *UpdateRejactSwapRequest) (*UpdateRejactSwapResponse, error)
	GetChangeSwap(context.Context, *GetChangeSwapRequest) (*GetChangeSwapResponse, error)
	CreateAddRecyclingCenter(context.Context, *CreateAddRecyclingCenterRequest) (*CreateAddRecyclingCenterResponse, error)
	SearchRecyclingCenter(context.Context, *SearchRecyclingCenterRequest) (*SearchRecyclingCenterResponse, error)
	CreateRecyclingSubmissions(context.Context, *CreteRecyclingSubmissionsRequest) (*CreteRecyclingSubmissionsResponse, error)
	CreateAddUserRating(context.Context, *CreateAddUserRatingRequest) (*CreateAddUserRatingResponse, error)
	GetUserRating(context.Context, *GetUserRatingRequest) (*GetUserRatingResponse, error)
	CreateItemCategoryManag(context.Context, *CreateItemCategoryManagRequest) (*CreateItemCategoryManagResponse, error)
	GetStatistics(context.Context, *GetStatisticsRequest) (*GetStatisticsResponse, error)
	GetMonitoringUserActivity(context.Context, *GetMonitoringUserActivityRequest) (*GetMonitoringUserActivityResponse, error)
	CreateEcoChallenge(context.Context, *CreateEcoChallengeRequest) (*CreateEcoChallengeResponse, error)
	CreateParticipateChallenge(context.Context, *CreateParticipateChallengeRequest) (*CreateParticipateChallengeResponse, error)
	UpdateEcoChallengeResult(context.Context, *UpdateEcoChallengeRresultRequest) (*UpdateEcoChallengeRresultResponse, error)
	CreateAddEcoTips(context.Context, *CreateAddEcoTipsRequest) (*CreateAddEcoTipsResponse, error)
	GetAddEcoTips(context.Context, *GetAddEcoTipsRequest) (*GetAddEcoTipsResponse, error)
	mustEmbedUnimplementedEcoServiceServer()
}

// UnimplementedEcoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEcoServiceServer struct {
}

func (UnimplementedEcoServiceServer) CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedEcoServiceServer) UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedEcoServiceServer) DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedEcoServiceServer) GetAllItems(context.Context, *GetAllItemsRequest) (*GetAllItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItems not implemented")
}
func (UnimplementedEcoServiceServer) GetByIdItem(context.Context, *GetByIdItemRequest) (*GetByIdItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdItem not implemented")
}
func (UnimplementedEcoServiceServer) SearchItemsAndFilt(context.Context, *SearchItemsAndFiltRequest) (*SearchItemsAndFiltResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchItemsAndFilt not implemented")
}
func (UnimplementedEcoServiceServer) CreateChangeSwap(context.Context, *CreateChangeSwapRequest) (*CreateChangeSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChangeSwap not implemented")
}
func (UnimplementedEcoServiceServer) UpdateAcceptSwap(context.Context, *UpdateAcceptSwapRequest) (*UpdateAcceptSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAcceptSwap not implemented")
}
func (UnimplementedEcoServiceServer) UpdateRejectSwap(context.Context, *UpdateRejactSwapRequest) (*UpdateRejactSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRejectSwap not implemented")
}
func (UnimplementedEcoServiceServer) GetChangeSwap(context.Context, *GetChangeSwapRequest) (*GetChangeSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChangeSwap not implemented")
}
func (UnimplementedEcoServiceServer) CreateAddRecyclingCenter(context.Context, *CreateAddRecyclingCenterRequest) (*CreateAddRecyclingCenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddRecyclingCenter not implemented")
}
func (UnimplementedEcoServiceServer) SearchRecyclingCenter(context.Context, *SearchRecyclingCenterRequest) (*SearchRecyclingCenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRecyclingCenter not implemented")
}
func (UnimplementedEcoServiceServer) CreateRecyclingSubmissions(context.Context, *CreteRecyclingSubmissionsRequest) (*CreteRecyclingSubmissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecyclingSubmissions not implemented")
}
func (UnimplementedEcoServiceServer) CreateAddUserRating(context.Context, *CreateAddUserRatingRequest) (*CreateAddUserRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddUserRating not implemented")
}
func (UnimplementedEcoServiceServer) GetUserRating(context.Context, *GetUserRatingRequest) (*GetUserRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRating not implemented")
}
func (UnimplementedEcoServiceServer) CreateItemCategoryManag(context.Context, *CreateItemCategoryManagRequest) (*CreateItemCategoryManagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemCategoryManag not implemented")
}
func (UnimplementedEcoServiceServer) GetStatistics(context.Context, *GetStatisticsRequest) (*GetStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistics not implemented")
}
func (UnimplementedEcoServiceServer) GetMonitoringUserActivity(context.Context, *GetMonitoringUserActivityRequest) (*GetMonitoringUserActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitoringUserActivity not implemented")
}
func (UnimplementedEcoServiceServer) CreateEcoChallenge(context.Context, *CreateEcoChallengeRequest) (*CreateEcoChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEcoChallenge not implemented")
}
func (UnimplementedEcoServiceServer) CreateParticipateChallenge(context.Context, *CreateParticipateChallengeRequest) (*CreateParticipateChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParticipateChallenge not implemented")
}
func (UnimplementedEcoServiceServer) UpdateEcoChallengeResult(context.Context, *UpdateEcoChallengeRresultRequest) (*UpdateEcoChallengeRresultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEcoChallengeResult not implemented")
}
func (UnimplementedEcoServiceServer) CreateAddEcoTips(context.Context, *CreateAddEcoTipsRequest) (*CreateAddEcoTipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddEcoTips not implemented")
}
func (UnimplementedEcoServiceServer) GetAddEcoTips(context.Context, *GetAddEcoTipsRequest) (*GetAddEcoTipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddEcoTips not implemented")
}
func (UnimplementedEcoServiceServer) mustEmbedUnimplementedEcoServiceServer() {}

// UnsafeEcoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EcoServiceServer will
// result in compilation errors.
type UnsafeEcoServiceServer interface {
	mustEmbedUnimplementedEcoServiceServer()
}

func RegisterEcoServiceServer(s grpc.ServiceRegistrar, srv EcoServiceServer) {
	s.RegisterService(&EcoService_ServiceDesc, srv)
}

func _EcoService_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/CreateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).CreateItem(ctx, req.(*CreateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/UpdateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/DeleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).DeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_GetAllItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).GetAllItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/GetAllItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).GetAllItems(ctx, req.(*GetAllItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_GetByIdItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).GetByIdItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/GetByIdItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).GetByIdItem(ctx, req.(*GetByIdItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_SearchItemsAndFilt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchItemsAndFiltRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).SearchItemsAndFilt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/SearchItemsAndFilt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).SearchItemsAndFilt(ctx, req.(*SearchItemsAndFiltRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_CreateChangeSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChangeSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).CreateChangeSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/CreateChangeSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).CreateChangeSwap(ctx, req.(*CreateChangeSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_UpdateAcceptSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAcceptSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).UpdateAcceptSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/UpdateAcceptSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).UpdateAcceptSwap(ctx, req.(*UpdateAcceptSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_UpdateRejectSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRejactSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).UpdateRejectSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/UpdateRejectSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).UpdateRejectSwap(ctx, req.(*UpdateRejactSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_GetChangeSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangeSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).GetChangeSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/GetChangeSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).GetChangeSwap(ctx, req.(*GetChangeSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_CreateAddRecyclingCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddRecyclingCenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).CreateAddRecyclingCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/CreateAddRecyclingCenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).CreateAddRecyclingCenter(ctx, req.(*CreateAddRecyclingCenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_SearchRecyclingCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRecyclingCenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).SearchRecyclingCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/SearchRecyclingCenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).SearchRecyclingCenter(ctx, req.(*SearchRecyclingCenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_CreateRecyclingSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreteRecyclingSubmissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).CreateRecyclingSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/CreateRecyclingSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).CreateRecyclingSubmissions(ctx, req.(*CreteRecyclingSubmissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_CreateAddUserRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddUserRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).CreateAddUserRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/CreateAddUserRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).CreateAddUserRating(ctx, req.(*CreateAddUserRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_GetUserRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).GetUserRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/GetUserRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).GetUserRating(ctx, req.(*GetUserRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_CreateItemCategoryManag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemCategoryManagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).CreateItemCategoryManag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/CreateItemCategoryManag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).CreateItemCategoryManag(ctx, req.(*CreateItemCategoryManagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_GetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).GetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/GetStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).GetStatistics(ctx, req.(*GetStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_GetMonitoringUserActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonitoringUserActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).GetMonitoringUserActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/GetMonitoringUserActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).GetMonitoringUserActivity(ctx, req.(*GetMonitoringUserActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_CreateEcoChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEcoChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).CreateEcoChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/CreateEcoChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).CreateEcoChallenge(ctx, req.(*CreateEcoChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_CreateParticipateChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateParticipateChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).CreateParticipateChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/CreateParticipateChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).CreateParticipateChallenge(ctx, req.(*CreateParticipateChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_UpdateEcoChallengeResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEcoChallengeRresultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).UpdateEcoChallengeResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/UpdateEcoChallengeResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).UpdateEcoChallengeResult(ctx, req.(*UpdateEcoChallengeRresultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_CreateAddEcoTips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddEcoTipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).CreateAddEcoTips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/CreateAddEcoTips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).CreateAddEcoTips(ctx, req.(*CreateAddEcoTipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcoService_GetAddEcoTips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddEcoTipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcoServiceServer).GetAddEcoTips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EcoService/GetAddEcoTips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcoServiceServer).GetAddEcoTips(ctx, req.(*GetAddEcoTipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EcoService_ServiceDesc is the grpc.ServiceDesc for EcoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EcoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.EcoService",
	HandlerType: (*EcoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItem",
			Handler:    _EcoService_CreateItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _EcoService_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _EcoService_DeleteItem_Handler,
		},
		{
			MethodName: "GetAllItems",
			Handler:    _EcoService_GetAllItems_Handler,
		},
		{
			MethodName: "GetByIdItem",
			Handler:    _EcoService_GetByIdItem_Handler,
		},
		{
			MethodName: "SearchItemsAndFilt",
			Handler:    _EcoService_SearchItemsAndFilt_Handler,
		},
		{
			MethodName: "CreateChangeSwap",
			Handler:    _EcoService_CreateChangeSwap_Handler,
		},
		{
			MethodName: "UpdateAcceptSwap",
			Handler:    _EcoService_UpdateAcceptSwap_Handler,
		},
		{
			MethodName: "UpdateRejectSwap",
			Handler:    _EcoService_UpdateRejectSwap_Handler,
		},
		{
			MethodName: "GetChangeSwap",
			Handler:    _EcoService_GetChangeSwap_Handler,
		},
		{
			MethodName: "CreateAddRecyclingCenter",
			Handler:    _EcoService_CreateAddRecyclingCenter_Handler,
		},
		{
			MethodName: "SearchRecyclingCenter",
			Handler:    _EcoService_SearchRecyclingCenter_Handler,
		},
		{
			MethodName: "CreateRecyclingSubmissions",
			Handler:    _EcoService_CreateRecyclingSubmissions_Handler,
		},
		{
			MethodName: "CreateAddUserRating",
			Handler:    _EcoService_CreateAddUserRating_Handler,
		},
		{
			MethodName: "GetUserRating",
			Handler:    _EcoService_GetUserRating_Handler,
		},
		{
			MethodName: "CreateItemCategoryManag",
			Handler:    _EcoService_CreateItemCategoryManag_Handler,
		},
		{
			MethodName: "GetStatistics",
			Handler:    _EcoService_GetStatistics_Handler,
		},
		{
			MethodName: "GetMonitoringUserActivity",
			Handler:    _EcoService_GetMonitoringUserActivity_Handler,
		},
		{
			MethodName: "CreateEcoChallenge",
			Handler:    _EcoService_CreateEcoChallenge_Handler,
		},
		{
			MethodName: "CreateParticipateChallenge",
			Handler:    _EcoService_CreateParticipateChallenge_Handler,
		},
		{
			MethodName: "UpdateEcoChallengeResult",
			Handler:    _EcoService_UpdateEcoChallengeResult_Handler,
		},
		{
			MethodName: "CreateAddEcoTips",
			Handler:    _EcoService_CreateAddEcoTips_Handler,
		},
		{
			MethodName: "GetAddEcoTips",
			Handler:    _EcoService_GetAddEcoTips_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "itemService.proto",
}
